document.addEventListener('DOMContentLoaded', () => {
  const navbar = document.querySelector('.navbar');
  const buttons = document.querySelectorAll('.module-btn');

  // Navbar shrink effect
  if (navbar) {
    window.addEventListener('scroll', () => {
      if (window.scrollY > 50) navbar.classList.add('shrink');
      else navbar.classList.remove('shrink');
    });
  }

  // Animate module buttons
  buttons.forEach((btn, index) => {
    btn.style.animation = `fadeInUp 0.6s ease forwards ${index * 0.2}s`;
  });

  // Initialize particles.js background if available
  if (window.particlesJS) {
    particlesJS('particles-js', {
      particles: {
        number: { value: 80 },
        size: { value: 3 },
        move: { speed: 1 },
        line_linked: { enable: true },
      },
    });
  }

  // Enhanced ripple click effect with glow
  buttons.forEach(btn => {
    // Add glow element
    const glow = document.createElement('div');
    glow.classList.add('btn-glow');
    btn.appendChild(glow);

    btn.addEventListener('click', function (e) {
      const circle = document.createElement('span');
      const diameter = Math.max(this.clientWidth, this.clientHeight);
      const radius = diameter / 2;

      circle.style.width = circle.style.height = `${diameter}px`;
      circle.style.left = `${e.clientX - this.offsetLeft - radius}px`;
      circle.style.top = `${e.clientY - this.offsetTop - radius}px`;
      circle.classList.add('ripple');

      const existingRipple = this.getElementsByClassName('ripple')[0];
      if (existingRipple) existingRipple.remove();

      this.appendChild(circle);
    });
  });

  // Initialize dark mode
  initDarkMode();

  // Initialize scroll reveal animations
  initScrollReveal();
  
  // Initialize advanced interactions
  initAdvancedInteractions();
});

// Advanced scroll reveal animations with staggered effects
function initScrollReveal() {
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        
        // Add staggered animation to child elements
        const children = entry.target.querySelectorAll('.stagger-animation');
        children.forEach((child, index) => {
          setTimeout(() => {
            child.classList.add('visible');
          }, index * 100);
        });
      }
    });
  }, observerOptions);

  // Add different animation classes to elements
  const elementsToReveal = document.querySelectorAll('.feature-card, .testimonial-card, .faq-item, .stat-card, .class-card, .child-card');
  elementsToReveal.forEach((el, index) => {
    // Add different animation types
    if (index % 4 === 0) el.classList.add('fade-in');
    else if (index % 4 === 1) el.classList.add('slide-in-left');
    else if (index % 4 === 2) el.classList.add('slide-in-right');
    else el.classList.add('scale-in');
    
    // Add staggered delay
    el.classList.add(`stagger-${(index % 5) + 1}`);
    
    observer.observe(el);
  });
}

// Advanced button interactions
function initAdvancedInteractions() {
  // Add hover effects to cards
  const cards = document.querySelectorAll('.feature-card, .stat-card, .class-card, .child-card');
  cards.forEach(card => {
    card.classList.add('hover-lift');
    
    // Add magnetic effect
    card.addEventListener('mousemove', (e) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left - rect.width / 2;
      const y = e.clientY - rect.top - rect.height / 2;
      
      card.style.transform = `translateY(-5px) translateX(${x * 0.1}px) translateY(${y * 0.1}px)`;
    });
    
    card.addEventListener('mouseleave', () => {
      card.style.transform = 'translateY(0) translateX(0) translateY(0)';
    });
  });

  // Add pulse effect to important elements
  const importantElements = document.querySelectorAll('.stat-number, .attendance-status');
  importantElements.forEach(el => {
    el.classList.add('pulse');
  });
}

// Navigation function (fixed event usage)
function navigateToModule(ev, link) {
  const btn = ev.target.closest('.module-btn');
  if (!btn) return;

  // Disable button to prevent double clicks
  btn.style.opacity = '0.7';
  btn.style.pointerEvents = 'none';

  // Create spinner
  const spinner = document.createElement('div');
  spinner.className = 'loading-spinner';
  spinner.style.cssText =
    'width:20px;height:20px;border:2px solid rgba(255,255,255,0.3);' +
    'border-top:2px solid white;border-radius:50%;animation:spin 1s linear infinite;margin-left:10px';
  btn.appendChild(spinner);

  // Announce to screen reader (if available)
  if (window.announceToScreenReader) {
    window.announceToScreenReader(`Navigating to ${link}`);
  }

  // Delay redirect for smooth animation
  setTimeout(() => (window.location.href = link), 500);
}

// Dark Mode Toggle
function initDarkMode() {
  const darkModeToggle = document.getElementById('darkModeToggle');
  const body = document.body;
  
  // Check for saved theme preference or default to light mode
  const currentTheme = localStorage.getItem('theme') || 'light';
  body.setAttribute('data-theme', currentTheme);
  
  // Update icon based on current theme
  const icon = darkModeToggle.querySelector('i');
  if (currentTheme === 'dark') {
    icon.className = 'fas fa-sun';
  } else {
    icon.className = 'fas fa-moon';
  }
  
  darkModeToggle.addEventListener('click', () => {
    const currentTheme = body.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    body.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    
    // Update icon
    const icon = darkModeToggle.querySelector('i');
    if (newTheme === 'dark') {
      icon.className = 'fas fa-sun';
    } else {
      icon.className = 'fas fa-moon';
    }
    
    // Add smooth transition
    body.style.transition = 'background-color 0.3s ease, color 0.3s ease';
    setTimeout(() => {
      body.style.transition = '';
    }, 300);
  });
}

// Expose function globally
window.QRAttendance = {
  navigateToModule,
  initDarkMode,
};

// CSS animation keyframes (if injected dynamically)
const style = document.createElement('style');
style.innerHTML = `
@keyframes fadeInUp {
  0% { opacity: 0; transform: translateY(20px); }
  100% { opacity: 1; transform: translateY(0); }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.ripple {
  position: absolute;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.4);
  transform: scale(0);
  animation: ripple 0.6s linear;
}

@keyframes ripple {
  to {
    transform: scale(4);
    opacity: 0;
  }
}

@keyframes pulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(37, 99, 235, 0.3);
  }
  50% {
    box-shadow: 0 0 30px rgba(37, 99, 235, 0.6);
  }
}

.animate-pulse {
  animation: pulse 2s ease-in-out infinite;
}

.animate-glow {
  animation: glow 3s ease-in-out infinite;
}

/* Enhanced scroll animations */
.scroll-reveal {
  opacity: 0;
  transform: translateY(50px);
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

.scroll-reveal.revealed {
  opacity: 1;
  transform: translateY(0);
}

/* Parallax effect for hero section */
.parallax {
  transform: translateZ(0);
  will-change: transform;
}
`;
document.head.appendChild(style);